 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
    954
 ** ¿Cuánto tiempo dura la captura?
    56.15 segundos aprox.
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
    192.168.1.34 // IP privada // Porque las IP en el rango de direcciones 192.169.0.0 - 192.168.255.255 son privadas de clase C


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
    UDP es mayor por mucho // Si, ya que en tiempo real se usa udp ya que si pierde paquetes simplemente los descarta frente a tcp que reintenta el envio
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos?
    ICMP,RTP,RTCP,HTTP,ARP.


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
    7,5; 14,5; 16,3; 38; 39; 55,5
 ** Y los paquetes con RTP, ¿cuándo se envían?
    del seg 17 al 38



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las primeras cuatro tramas de la captura nada más arrancar Ekiga.
 ** ¿Qué servicio es el utilizado en estas tramas?
    DNS
 ** ¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
    80.58.61.250
 ** ¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
    86.64.162.35 
 ** ¿Por qué se pide también para 35.162.64.86.in-addr.arpa?
    ..


6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
    "http://ekiga.net/ip/"
 ** ¿Qué user agent (UA) la está pidiendo?
    ekiga
 ** ¿Qué devuelve el servidor?
    en el paquete que responde con 200 ok le envia ademas la ip solicitada: 83.36.48.212
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
    Una direccion ip distinta. Te esta devolviendo tu ip. 


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué crees que se hace uso de este protocolo en esta captura? Busca en la Wikipedia.
    Porque STUN sirve para averiguar que tipo de NAT estas usando y aquí se esta usando NAT.
 ** ¿Estamos tras un NAT?
    Si, por lo explicado anteriormente.


8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
    83.36.48.212
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
    5060
 ** ¿Qué método SIP utiliza el UA para registrarse?
    REGISTER
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
    INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?
    no, Status: 401 Unauthorized
 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
    Viendo el siguiente paquete SIP
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
    Faltaba el campo Authorization, por eso el segundo intento ocupa 712 bytes en vez de 523 que ocupaba el primero
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
    3600 segundos = 1 hora


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
    si, en el campo from: "Gregorio Robles" <sip:grex@ekiga.net>
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
    la descripcion de la sesion (SDP)
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
    No, porque le devuelve un error 407 Proxy Authentication Required
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
    Le falta el campo Proxy-Authorization al primer INVITE

11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
    RTP para todo lo que tenga que ver con tiempo real
    Y el estandar H-261 para poder manejar los paquetes que enviamos y recibimos
 ** ¿Cuál es el tamaño de paquete de los mismos?
    De RTP son 214
 ** ¿Se utilizan bits de padding?
    No, Padding: False 
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
    20 ms
 ** ¿Cuántos bits/segundo estamos enviando?
    si enviamos paquetes cada 0.02 segundos de un tamaño de 160 bytes(sin cabeceras), enviaremos 64kbps


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
    2, uno por el puerto 5010 y otro por el 5014 // Ya que se trata de RTP supongo que serán audio y video
 ** ¿Cuántos paquetes se pierden?
    En status salen todos como OK, luego supongo que no se ha perdido ninguno
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
    delta = 1290.44 y 1290.47 [ms] // el retardo entre los paquetes
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
    maximo 119.63 y 183.09 y medio 42.5 y 153.24 respectivamente // no, porque fluctuan mucho


13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
    el primero es el de "prueba" y por lo tanto valen 0 ambos casos, una vez enviado dicho paquete con un numero de secuencia aleatorio el siguiente con el numero de secuencia ya sucesivo al primero tiene de delta el valor 21.28 y de jitter 0,08
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
    En este caso si porque sabemos que no se han perdido paquetes, pero por lo normal no ya que para nosotros el que nos han mandado primero será el primero que recibamos ya que el numero de secuencia por seguridad es aleatorio en el primer paquete
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
    hasta el 247
 ** ¿A qué se debe el cambio tan brusco del jitter?
    Porque si te fijas cambia el ancho de banda a un valor menor(de 62,4 a 28,8)
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
    Si, porque al cambiar el ancho de banda a menos, el retardo entre los paquetes varia(aumenta)
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
    No hay una dependencia matematica exacta, pero los cambios de jitter bruscos hace que haya mas retardo


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
    25 segundos aprox
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
    SSRC: 0x43306582 y 0xBF4AFD37 // para el audio y el video // No


15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
    BYE
 ** ¿En qué trama(s)?
    924;925;927;933
 ** ¿Por qué crees que se envía varias veces?
    Porque no le llega el ACK, ya sea porque le llego tarde o porque se perdio su trama BYE lo tiene que reintentar


16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
    Para borrar al usuario con expires=0, como en la practica 4
 ** ¿En qué trama sucede esto?
    950;952
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
    En el campo expires que ahora irá a 0



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Tendrás que dar de alta una cuenta en www.ekiga.net con el navegador. Recuerda también que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso en el que participa SIP. Para realizar los siguientes ejercicios, deberás crearte una cuenta en ekiga.net y darte de alta la lanzar la aplicación.

17. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
    DNS si, pero STUN no porque no nos estamos valiendo de un NAT
 ** ¿Son diferentes el registro y la descripción de la sesión?
    No


18. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
    2
 ** ¿Cuál es su periodicidad?
    20 ms como antes
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
    Max Delta(ms) : 30,65 ; Max jitter(ms) : 4,53 ; Mean jitter(ms) : 3,24
    Max Delta(ms) : 30,04 ; Max jitter(ms) : 4,72 ; Mean jitter(ms) : 3,18
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
    Si. En Telephony, VoIp calls, das a la unica que hay, decode, player y reproducir
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?
    Parece como una especie de emisora de radio pero no estoy seguro, en el otro audio se escucha ruido ya que en el laboratorio no habia micro...



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

19. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como sip.libpcap. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.libpcap y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

[Recuerda mirar el guión para ver las instrucciones de entrega]
